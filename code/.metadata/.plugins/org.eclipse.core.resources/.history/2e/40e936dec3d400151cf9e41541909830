package models.entidades;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import java.util.List;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;

/**
 * Immutable implementation of {@link Usuario}.
 * <p>
 * Use the builder to create immutable instances:
 * {@code UsuarioFactory.builder()}.
 */
@SuppressWarnings("all")
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "Usuario"})
@Immutable
public final class UsuarioFactory extends Usuario {
  private final Plan plan;

  private UsuarioFactory(Plan plan) {
    this.plan = plan;
  }

  /**
   * @return The value of the {@code plan} attribute
   */
  @JsonProperty
  @Override
  public Plan getPlan() {
    return plan;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Usuario#getPlan() plan} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for plan
   * @return A modified copy of the {@code this} object
   */
  public final UsuarioFactory withPlan(Plan value) {
    if (this.plan == value) return this;
    Plan newValue = Preconditions.checkNotNull(value, "plan");
    return new UsuarioFactory(newValue);
  }

  /**
   * This instance is equal to all instances of {@code UsuarioFactory} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof UsuarioFactory
        && equalTo((UsuarioFactory) another);
  }

  private boolean equalTo(UsuarioFactory another) {
    return plan.equals(another.plan);
  }

  /**
   * Computes a hash code from attributes: {@code plan}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    int h = 31;
    h = h * 17 + plan.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code Usuario...} with all non-generated
   * and non-auxiliary attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return MoreObjects.toStringHelper("Usuario")
        .add("plan", plan)
        .toString();
  }

  /**
   * Utility type used to correctly read immutable object from JSON representation.
   * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding infrastructure
   */
  @Deprecated
  @JsonDeserialize
  static final class Json extends Usuario {
    @Nullable Plan plan;
    @JsonProperty
    public void setPlan(Plan plan) {
      this.plan = plan;
    }
    @Override
    public Plan getPlan() { throw new UnsupportedOperationException(); }
  }

  /**
   * @param json A JSON-bindable data structure
   * @return An immutable value type
   * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding infrastructure
   */
  @Deprecated
  @JsonCreator
  static UsuarioFactory fromJson(Json json) {
    UsuarioFactory.Builder builder = UsuarioFactory.builder();
    if (json.plan != null) {
      builder.setPlan(json.plan);
    }
    return builder.build();
  }

  /**
   * Creates an immutable copy of a {@link Usuario} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable Usuario instance
   */
  public static UsuarioFactory copyOf(Usuario instance) {
    if (instance instanceof UsuarioFactory) {
      return (UsuarioFactory) instance;
    }
    return UsuarioFactory.builder()
        .from(instance)
        .build();
  }

  /**
   * Creates a builder for {@link UsuarioFactory UsuarioFactory}.
   * @return A new UsuarioFactory builder
   */
  public static UsuarioFactory.Builder builder() {
    return new UsuarioFactory.Builder();
  }

  /**
   * Builds instances of type {@link UsuarioFactory UsuarioFactory}.
   * Initialize attributes and then invoke the {@link #build()} method to create an
   * immutable instance.
   * <p><em>{@code Builder} is not thread-safe and generally should not be stored in a field or collection,
   * but instead used immediately to create instances.</em>
   */
  @NotThreadSafe
  public static final class Builder {
    private static final long INIT_BIT_PLAN = 0x1L;
    private long initBits = 0x1;

    private @Nullable Plan plan;

    private Builder() {
    }

    /**
     * Fill a builder with attribute values from the provided {@code Usuario} instance.
     * Regular attribute values will be replaced with those from the given instance.
     * Absent optional values will not replace present values.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(Usuario instance) {
      Preconditions.checkNotNull(instance, "instance");
      setPlan(instance.getPlan());
      return this;
    }

    /**
     * Initializes the value for the {@link Usuario#getPlan() plan} attribute.
     * @param plan The value for plan 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder setPlan(Plan plan) {
      this.plan = Preconditions.checkNotNull(plan, "plan");
      initBits &= ~INIT_BIT_PLAN;
      return this;
    }

    /**
     * Builds a new {@link UsuarioFactory UsuarioFactory}.
     * @return An immutable instance of Usuario
     * @throws java.lang.IllegalStateException if any required attributes are missing
     */
    public UsuarioFactory build() throws IllegalStateException {
      checkRequiredAttributes();
      return new UsuarioFactory(plan);
    }

    private boolean planIsSet() {
      return (initBits & INIT_BIT_PLAN) == 0;
    }

    private void checkRequiredAttributes() throws IllegalStateException {
      if (initBits != 0) {
        throw new IllegalStateException(formatRequiredAttributesMessage());
      }
    }
    private String formatRequiredAttributesMessage() {
      List<String> attributes = Lists.newArrayList();
      if (!planIsSet()) attributes.add("plan");
      return "Cannot build Usuario, some of required attributes are not set " + attributes;
    }
  }
}
