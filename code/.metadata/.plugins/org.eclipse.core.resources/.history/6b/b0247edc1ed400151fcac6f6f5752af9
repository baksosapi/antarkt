package models.entidades;

import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import java.util.List;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;

/**
 * Immutable implementation of {@link AbstractMaquina}.
 * <p>
 * Use the builder to create immutable instances:
 * {@code ImmutableMaquina.builder()}.
 */
@SuppressWarnings("all")
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "AbstractMaquina"})
@Immutable
public final class ImmutableMaquina implements AbstractMaquina {
  private final String id;
  private final String nombre;
  private final String ip;

  private ImmutableMaquina(String id, String nombre, String ip) {
    this.id = id;
    this.nombre = nombre;
    this.ip = ip;
  }

  /**
   * @return The value of the {@code id} attribute
   */
  @Override
  public String getId() {
    return id;
  }

  /**
   * @return The value of the {@code nombre} attribute
   */
  @Override
  public String getNombre() {
    return nombre;
  }

  /**
   * @return The value of the {@code ip} attribute
   */
  @Override
  public String getIp() {
    return ip;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link AbstractMaquina#getId() id} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for id
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableMaquina withId(String value) {
    if (this.id == value) return this;
    String newValue = Preconditions.checkNotNull(value, "id");
    return new ImmutableMaquina(newValue, this.nombre, this.ip);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link AbstractMaquina#getNombre() nombre} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for nombre
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableMaquina withNombre(String value) {
    if (this.nombre == value) return this;
    String newValue = Preconditions.checkNotNull(value, "nombre");
    return new ImmutableMaquina(this.id, newValue, this.ip);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link AbstractMaquina#getIp() ip} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for ip
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableMaquina withIp(String value) {
    if (this.ip == value) return this;
    String newValue = Preconditions.checkNotNull(value, "ip");
    return new ImmutableMaquina(this.id, this.nombre, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableMaquina} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableMaquina
        && equalTo((ImmutableMaquina) another);
  }

  private boolean equalTo(ImmutableMaquina another) {
    return id.equals(another.id)
        && nombre.equals(another.nombre)
        && ip.equals(another.ip);
  }

  /**
   * Computes a hash code from attributes: {@code id}, {@code nombre}, {@code ip}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    int h = 31;
    h = h * 17 + id.hashCode();
    h = h * 17 + nombre.hashCode();
    h = h * 17 + ip.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code Maquina...} with all non-generated
   * and non-auxiliary attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return MoreObjects.toStringHelper("Maquina")
        .add("id", id)
        .add("nombre", nombre)
        .add("ip", ip)
        .toString();
  }

  /**
   * Creates an immutable copy of a {@link AbstractMaquina} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable Maquina instance
   */
  public static ImmutableMaquina copyOf(AbstractMaquina instance) {
    if (instance instanceof ImmutableMaquina) {
      return (ImmutableMaquina) instance;
    }
    return ImmutableMaquina.builder()
        .from(instance)
        .build();
  }

  /**
   * Creates a builder for {@link ImmutableMaquina ImmutableMaquina}.
   * @return A new ImmutableMaquina builder
   */
  public static ImmutableMaquina.Builder builder() {
    return new ImmutableMaquina.Builder();
  }

  /**
   * Builds instances of type {@link ImmutableMaquina ImmutableMaquina}.
   * Initialize attributes and then invoke the {@link #build()} method to create an
   * immutable instance.
   * <p><em>{@code Builder} is not thread-safe and generally should not be stored in a field or collection,
   * but instead used immediately to create instances.</em>
   */
  @NotThreadSafe
  public static final class Builder {
    private static final long INIT_BIT_ID = 0x1L;
    private static final long INIT_BIT_NOMBRE = 0x2L;
    private static final long INIT_BIT_IP = 0x4L;
    private long initBits = 0x7;

    private @Nullable String id;
    private @Nullable String nombre;
    private @Nullable String ip;

    private Builder() {
    }

    /**
     * Fill a builder with attribute values from the provided {@code AbstractMaquina} instance.
     * Regular attribute values will be replaced with those from the given instance.
     * Absent optional values will not replace present values.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(AbstractMaquina instance) {
      Preconditions.checkNotNull(instance, "instance");
      id(instance.getId());
      nombre(instance.getNombre());
      ip(instance.getIp());
      return this;
    }

    /**
     * Initializes the value for the {@link AbstractMaquina#getId() id} attribute.
     * @param id The value for id 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder id(String id) {
      this.id = Preconditions.checkNotNull(id, "id");
      initBits &= ~INIT_BIT_ID;
      return this;
    }

    /**
     * Initializes the value for the {@link AbstractMaquina#getNombre() nombre} attribute.
     * @param nombre The value for nombre 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder nombre(String nombre) {
      this.nombre = Preconditions.checkNotNull(nombre, "nombre");
      initBits &= ~INIT_BIT_NOMBRE;
      return this;
    }

    /**
     * Initializes the value for the {@link AbstractMaquina#getIp() ip} attribute.
     * @param ip The value for ip 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder ip(String ip) {
      this.ip = Preconditions.checkNotNull(ip, "ip");
      initBits &= ~INIT_BIT_IP;
      return this;
    }

    /**
     * Builds a new {@link ImmutableMaquina ImmutableMaquina}.
     * @return An immutable instance of Maquina
     * @throws java.lang.IllegalStateException if any required attributes are missing
     */
    public ImmutableMaquina build() throws IllegalStateException {
      checkRequiredAttributes();
      return new ImmutableMaquina(id, nombre, ip);
    }

    private boolean idIsSet() {
      return (initBits & INIT_BIT_ID) == 0;
    }

    private boolean nombreIsSet() {
      return (initBits & INIT_BIT_NOMBRE) == 0;
    }

    private boolean ipIsSet() {
      return (initBits & INIT_BIT_IP) == 0;
    }

    private void checkRequiredAttributes() throws IllegalStateException {
      if (initBits != 0) {
        throw new IllegalStateException(formatRequiredAttributesMessage());
      }
    }
    private String formatRequiredAttributesMessage() {
      List<String> attributes = Lists.newArrayList();
      if (!idIsSet()) attributes.add("id");
      if (!nombreIsSet()) attributes.add("nombre");
      if (!ipIsSet()) attributes.add("ip");
      return "Cannot build Maquina, some of required attributes are not set " + attributes;
    }
  }
}
