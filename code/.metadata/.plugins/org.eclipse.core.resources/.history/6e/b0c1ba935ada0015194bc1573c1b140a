package servicios.dao;

import java.util.concurrent.CompletableFuture;

import org.bson.types.ObjectId;
import org.jongo.FindOne;
import org.jongo.MongoCollection;

import models.entidades.Entidad;

public abstract class DAO<T extends Entidad> { // <T extends Entidad>
	private String collectionName;
	private Class<T> collectionClass;
	private JongoDatabase mongo;
	private MongoCollection collection;
	
	public DAO(JongoDatabase m, String string, Class<T> class1) {
		this.collectionName = string;
		this.collectionClass = class1;
		this.mongo = m;
		if(this.mongo != null){
			this.collection = mongo.getCollection(collectionName);
		} else {
			System.err.println("Mongo WAS NULL on DAO<?>");
		}
		 
	}

	public CompletableFuture<T> findById(String id){ 
		return CompletableFuture.supplyAsync( () -> collection.findOne(new ObjectId(id) ) ).thenApply( this::materialize );
	}
	
	public CompletableFuture<T> findByName(String name){
		assert name != "" && name != null : "Empty name";
		return CompletableFuture.supplyAsync( () -> collection.findOne("{nombre: #}", name) ).thenApply( this::materialize); 
	}
	
	// Devolver copia con campos actualizados { id, ultima modificacion }
	public CompletableFuture<String> insert(T u){
		assert u != null : "Null element cannot be inserted";
		return CompletableFuture.supplyAsync( () -> collection.insert(u) ).thenApply( wr ->
			{
				if(wr.wasAcknowledged() ){
					System.out.println(wr.getUpsertedId() + " / " + u.getId() );
					return "written";
				} else {
					return "nope";
				}
			}
		);
	}
	
	public CompletableFuture<Boolean> remove(String id){
		return CompletableFuture.supplyAsync( () -> collection.remove(new ObjectId(id) ) ).thenApply( wr -> wr.wasAcknowledged() );
	}
	
	private T materialize(FindOne o){
	
		assert o != null : "Cannot materialize null";
		System.out.println( o.hashCode() );
		System.out.println(collectionClass.getName() );
		T clazz = o.as(collectionClass);
		return clazz;
		
	}
	
	public CompletableFuture<T> findBySingleField(String fieldname, Object fieldValue){
		
	}

}
