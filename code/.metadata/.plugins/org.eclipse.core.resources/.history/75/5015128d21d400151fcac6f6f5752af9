package models.mensajes;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;

/**
 * Immutable implementation of {@link StringMessage}.
 * <p>
 * Use the builder to create immutable instances:
 * {@code ImmutableStringMessage.builder()}.
 */
@SuppressWarnings("all")
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "StringMessage"})
@Immutable
public final class ImmutableStringMessage extends StringMessage {
  private final String body;
  private final @Nullable Long duracion;
  private final @Nullable Estado estado;
  private final @Nullable Integer progreso;
  private final String referencia;

  private ImmutableStringMessage(ImmutableStringMessage.Builder builder) {
    this.body = builder.body;
    this.duracion = builder.duracion;
    this.estado = builder.estado;
    this.progreso = builder.progreso;
    this.referencia = builder.referencia;
  }

  /**
   * @return The value of the {@code body} attribute
   */
  @JsonProperty
  @Override
  public String body() {
    return body;
  }

  /**
   * @return The value of the {@code duracion} attribute
   */
  @JsonProperty
  @Override
  public Optional<Long> duracion() {
    return Optional.ofNullable(duracion);
  }

  /**
   * @return The value of the {@code estado} attribute
   */
  @JsonProperty
  @Override
  public Optional<Estado> estado() {
    return Optional.ofNullable(estado);
  }

  /**
   * @return The value of the {@code progreso} attribute
   */
  @JsonProperty
  @Override
  public Optional<Integer> progreso() {
    return Optional.ofNullable(progreso);
  }

  /**
   * @return The value of the {@code referencia} attribute
   */
  @JsonProperty
  @Override
  public String referencia() {
    return referencia;
  }

  /**
   * This instance is equal to all instances of {@code ImmutableStringMessage} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableStringMessage
        && equalTo((ImmutableStringMessage) another);
  }

  private boolean equalTo(ImmutableStringMessage another) {
    return body.equals(another.body)
        && Objects.equal(duracion, another.duracion)
        && Objects.equal(estado, another.estado)
        && Objects.equal(progreso, another.progreso)
        && referencia.equals(another.referencia);
  }

  /**
   * Computes a hash code from attributes: {@code body}, {@code duracion}, {@code estado}, {@code progreso}, {@code referencia}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    int h = 31;
    h = h * 17 + body.hashCode();
    h = h * 17 + Objects.hashCode(duracion);
    h = h * 17 + Objects.hashCode(estado);
    h = h * 17 + Objects.hashCode(progreso);
    h = h * 17 + referencia.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code StringMessage...} with all non-generated
   * and non-auxiliary attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return MoreObjects.toStringHelper("StringMessage")
        .add("body", body)
        .add("duracion", duracion())
        .add("estado", estado())
        .add("progreso", progreso())
        .add("referencia", referencia)
        .toString();
  }

  /**
   * Utility type used to correctly read immutable object from JSON representation.
   * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding infrastructure
   */
  @Deprecated
  @JsonDeserialize
  static final class Json extends StringMessage {
    @Nullable String body;
    Optional<Long> duracion = Optional.empty();
    Optional<Estado> estado = Optional.empty();
    Optional<Integer> progreso = Optional.empty();
    @Nullable String referencia;
    @JsonProperty
    public void setBody(String body) {
      this.body = body;
    }
    @JsonProperty
    public void setDuracion(Optional<Long> duracion) {
      this.duracion = duracion;
    }
    @JsonProperty
    public void setEstado(Optional<Estado> estado) {
      this.estado = estado;
    }
    @JsonProperty
    public void setProgreso(Optional<Integer> progreso) {
      this.progreso = progreso;
    }
    @JsonProperty
    public void setReferencia(String referencia) {
      this.referencia = referencia;
    }
    @Override
    public String body() { throw new UnsupportedOperationException(); }
    @Override
    public Optional<Long> duracion() { throw new UnsupportedOperationException(); }
    @Override
    public Optional<Estado> estado() { throw new UnsupportedOperationException(); }
    @Override
    public Optional<Integer> progreso() { throw new UnsupportedOperationException(); }
    @Override
    public String referencia() { throw new UnsupportedOperationException(); }
  }

  /**
   * @param json A JSON-bindable data structure
   * @return An immutable value type
   * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding infrastructure
   */
  @Deprecated
  @JsonCreator
  static ImmutableStringMessage fromJson(Json json) {
    ImmutableStringMessage.Builder builder = ImmutableStringMessage.builder();
    if (json.body != null) {
      builder.body(json.body);
    }
    if (json.duracion != null) {
      builder.duracion(json.duracion);
    }
    if (json.estado != null) {
      builder.estado(json.estado);
    }
    if (json.progreso != null) {
      builder.progreso(json.progreso);
    }
    if (json.referencia != null) {
      builder.referencia(json.referencia);
    }
    return builder.build();
  }

  /**
   * Creates a builder for {@link ImmutableStringMessage ImmutableStringMessage}.
   * @return A new ImmutableStringMessage builder
   */
  public static ImmutableStringMessage.Builder builder() {
    return new ImmutableStringMessage.Builder();
  }

  /**
   * Builds instances of type {@link ImmutableStringMessage ImmutableStringMessage}.
   * Initialize attributes and then invoke the {@link #build()} method to create an
   * immutable instance.
   * <p><em>{@code Builder} is not thread-safe and generally should not be stored in a field or collection,
   * but instead used immediately to create instances.</em>
   */
  @NotThreadSafe
  public static final class Builder {
    private static final long INIT_BIT_BODY = 0x1L;
    private static final long INIT_BIT_REFERENCIA = 0x2L;
    private long initBits = 0x3;

    private @Nullable String body;
    private @Nullable Long duracion;
    private @Nullable Estado estado;
    private @Nullable Integer progreso;
    private @Nullable String referencia;

    private Builder() {
    }

    /**
     * Fill a builder with attribute values from the provided {@code models.mensajes.StringMessage} instance.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(StringMessage instance) {
      Preconditions.checkNotNull(instance, "instance");
      from((Object) instance);
      return this;
    }

    /**
     * Fill a builder with attribute values from the provided {@code models.mensajes.AgentResponse} instance.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(AgentResponse instance) {
      Preconditions.checkNotNull(instance, "instance");
      from((Object) instance);
      return this;
    }

    /**
     * Fill a builder with attribute values from the provided {@code models.mensajes.Message} instance.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(Message instance) {
      Preconditions.checkNotNull(instance, "instance");
      from((Object) instance);
      return this;
    }

    private void from(Object object) {
      if (object instanceof StringMessage) {
        StringMessage instance = (StringMessage) object;
        body(instance.body());
      }
      if (object instanceof AgentResponse) {
        AgentResponse instance = (AgentResponse) object;
        Optional<Long> duracionOptional = instance.duracion();
        if (duracionOptional.isPresent()) {
          duracion(duracionOptional);
        }
        Optional<Integer> progresoOptional = instance.progreso();
        if (progresoOptional.isPresent()) {
          progreso(progresoOptional);
        }
        Optional<Estado> estadoOptional = instance.estado();
        if (estadoOptional.isPresent()) {
          estado(estadoOptional);
        }
      }
      if (object instanceof Message) {
        Message instance = (Message) object;
        referencia(instance.referencia());
      }
    }

    /**
     * Initializes the value for the {@link StringMessage#body() body} attribute.
     * @param body The value for body 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder body(String body) {
      this.body = Preconditions.checkNotNull(body, "body");
      initBits &= ~INIT_BIT_BODY;
      return this;
    }

    /**
     * Initializes the optional value {@link StringMessage#duracion() duracion} to duracion.
     * @param duracion The value for duracion
     * @return {@code this} builder for chained invocation
     */
    public final Builder duracion(long duracion) {
      this.duracion = Preconditions.checkNotNull(duracion, "duracion");
      return this;
    }

    /**
     * Initializes the optional value {@link StringMessage#duracion() duracion} to duracion.
     * @param duracion The value for duracion
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder duracion(Optional<Long> duracion) {
      this.duracion = duracion.orElse(null);
      return this;
    }

    /**
     * Initializes the optional value {@link StringMessage#estado() estado} to estado.
     * @param estado The value for estado
     * @return {@code this} builder for chained invocation
     */
    public final Builder estado(Estado estado) {
      this.estado = Preconditions.checkNotNull(estado, "estado");
      return this;
    }

    /**
     * Initializes the optional value {@link StringMessage#estado() estado} to estado.
     * @param estado The value for estado
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder estado(Optional<Estado> estado) {
      this.estado = estado.orElse(null);
      return this;
    }

    /**
     * Initializes the optional value {@link StringMessage#progreso() progreso} to progreso.
     * @param progreso The value for progreso
     * @return {@code this} builder for chained invocation
     */
    public final Builder progreso(int progreso) {
      this.progreso = Preconditions.checkNotNull(progreso, "progreso");
      return this;
    }

    /**
     * Initializes the optional value {@link StringMessage#progreso() progreso} to progreso.
     * @param progreso The value for progreso
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder progreso(Optional<Integer> progreso) {
      this.progreso = progreso.orElse(null);
      return this;
    }

    /**
     * Initializes the value for the {@link StringMessage#referencia() referencia} attribute.
     * @param referencia The value for referencia 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder referencia(String referencia) {
      this.referencia = Preconditions.checkNotNull(referencia, "referencia");
      initBits &= ~INIT_BIT_REFERENCIA;
      return this;
    }

    /**
     * Builds a new {@link ImmutableStringMessage ImmutableStringMessage}.
     * @return An immutable instance of StringMessage
     * @throws java.lang.IllegalStateException if any required attributes are missing
     */
    public ImmutableStringMessage build() throws IllegalStateException {
      checkRequiredAttributes();
      return new ImmutableStringMessage(this);
    }

    private boolean bodyIsSet() {
      return (initBits & INIT_BIT_BODY) == 0;
    }

    private boolean referenciaIsSet() {
      return (initBits & INIT_BIT_REFERENCIA) == 0;
    }

    private void checkRequiredAttributes() throws IllegalStateException {
      if (initBits != 0) {
        throw new IllegalStateException(formatRequiredAttributesMessage());
      }
    }
    private String formatRequiredAttributesMessage() {
      List<String> attributes = Lists.newArrayList();
      if (!bodyIsSet()) attributes.add("body");
      if (!referenciaIsSet()) attributes.add("referencia");
      return "Cannot build StringMessage, some of required attributes are not set " + attributes;
    }
  }
}
