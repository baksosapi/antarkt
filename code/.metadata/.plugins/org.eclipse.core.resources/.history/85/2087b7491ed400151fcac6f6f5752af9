package models.entidades;

import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import java.time.LocalDate;
import java.util.List;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;

/**
 * Immutable implementation of {@link AbstractAplicacion}.
 * <p>
 * Use the builder to create immutable instances:
 * {@code new Aplicacion.Builder()}.
 */
@SuppressWarnings("all")
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "AbstractAplicacion"})
@Immutable
public final class Aplicacion extends AbstractAplicacion {
  private final ImmutableSet<Entorno> entornos;
  private final String id;
  private final LocalDate creadoEn;
  private final String nombre;

  private Aplicacion(Aplicacion.Builder builder) {
    this.entornos = builder.entornosBuilder.build();
    this.id = builder.id;
    this.creadoEn = builder.creadoEn;
    this.nombre = builder.nombre;
  }

  /**
   * @return The value of the {@code entornos} attribute
   */
  @Override
  public ImmutableSet<Entorno> entornos() {
    return entornos;
  }

  /**
   * @return The value of the {@code id} attribute
   */
  @Override
  public String getId() {
    return id;
  }

  /**
   * @return The value of the {@code creadoEn} attribute
   */
  @Override
  public LocalDate getCreadoEn() {
    return creadoEn;
  }

  /**
   * @return The value of the {@code nombre} attribute
   */
  @Override
  public String getNombre() {
    return nombre;
  }

  /**
   * This instance is equal to all instances of {@code Aplicacion} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof Aplicacion
        && equalTo((Aplicacion) another);
  }

  private boolean equalTo(Aplicacion another) {
    return entornos.equals(another.entornos)
        && id.equals(another.id)
        && creadoEn.equals(another.creadoEn)
        && nombre.equals(another.nombre);
  }

  /**
   * Computes a hash code from attributes: {@code entornos}, {@code id}, {@code creadoEn}, {@code nombre}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    int h = 31;
    h = h * 17 + entornos.hashCode();
    h = h * 17 + id.hashCode();
    h = h * 17 + creadoEn.hashCode();
    h = h * 17 + nombre.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code Aplicacion...} with all non-generated
   * and non-auxiliary attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return MoreObjects.toStringHelper("Aplicacion")
        .add("entornos", entornos)
        .add("id", id)
        .add("creadoEn", creadoEn)
        .add("nombre", nombre)
        .toString();
  }

  /**
   * Builds instances of type {@link Aplicacion Aplicacion}.
   * Initialize attributes and then invoke the {@link #create()} method to create an
   * immutable instance.
   * <p><em>{@code Builder} is not thread-safe and generally should not be stored in a field or collection,
   * but instead used immediately to create instances.</em>
   */
  @NotThreadSafe
  public static final class Builder {
    private static final long INIT_BIT_ID = 0x1L;
    private static final long INIT_BIT_CREADO_EN = 0x2L;
    private static final long INIT_BIT_NOMBRE = 0x4L;
    private long initBits = 0x7;

    private ImmutableSet.Builder<Entorno> entornosBuilder = ImmutableSet.builder();
    private @Nullable String id;
    private @Nullable LocalDate creadoEn;
    private @Nullable String nombre;

    /**
     * Creates a builder for {@link Aplicacion Aplicacion} instances.
     */
    public Builder() {
    }

    /**
     * Fill a builder with attribute values from the provided {@code models.entidades.AbstractAplicacion} instance.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(AbstractAplicacion instance) {
      Preconditions.checkNotNull(instance, "instance");
      from((Object) instance);
      return this;
    }

    /**
     * Fill a builder with attribute values from the provided {@code models.entidades.Entidad} instance.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(Entidad instance) {
      Preconditions.checkNotNull(instance, "instance");
      from((Object) instance);
      return this;
    }

    private void from(Object object) {
      if (object instanceof AbstractAplicacion) {
        AbstractAplicacion instance = (AbstractAplicacion) object;
        addAllEntornos(instance.entornos());
      }
      if (object instanceof Entidad) {
        Entidad instance = (Entidad) object;
        setCreadoEn(instance.getCreadoEn());
        setNombre(instance.getNombre());
        setId(instance.getId());
      }
    }

    /**
     * Adds one element to {@link AbstractAplicacion#entornos() entornos} set.
     * @param element A entornos element
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder addEntornos(Entorno element) {
      entornosBuilder.add(element);
      return this;
    }

    /**
     * Adds elements to {@link AbstractAplicacion#entornos() entornos} set.
     * @param elements An array of entornos elements
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder addEntornos(Entorno... elements) {
      entornosBuilder.add(elements);
      return this;
    }

    /**
     * Sets or replaces all elements for {@link AbstractAplicacion#entornos() entornos} set.
     * @param elements An iterable of entornos elements
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder setEntornos(Iterable<? extends Entorno> elements) {
      entornosBuilder = ImmutableSet.builder();
      return addAllEntornos(elements);
    }

    /**
     * Adds elements to {@link AbstractAplicacion#entornos() entornos} set.
     * @param elements An iterable of entornos elements
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder addAllEntornos(Iterable<? extends Entorno> elements) {
      entornosBuilder.addAll(elements);
      return this;
    }

    /**
     * Initializes the value for the {@link AbstractAplicacion#getId() id} attribute.
     * @param id The value for id 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder setId(String id) {
      this.id = Preconditions.checkNotNull(id, "id");
      initBits &= ~INIT_BIT_ID;
      return this;
    }

    /**
     * Initializes the value for the {@link AbstractAplicacion#getCreadoEn() creadoEn} attribute.
     * @param creadoEn The value for creadoEn 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder setCreadoEn(LocalDate creadoEn) {
      this.creadoEn = Preconditions.checkNotNull(creadoEn, "creadoEn");
      initBits &= ~INIT_BIT_CREADO_EN;
      return this;
    }

    /**
     * Initializes the value for the {@link AbstractAplicacion#getNombre() nombre} attribute.
     * @param nombre The value for nombre 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder setNombre(String nombre) {
      this.nombre = Preconditions.checkNotNull(nombre, "nombre");
      initBits &= ~INIT_BIT_NOMBRE;
      return this;
    }

    /**
     * Builds a new {@link Aplicacion Aplicacion}.
     * @return An immutable instance of Aplicacion
     * @throws java.lang.IllegalStateException if any required attributes are missing
     */
    public Aplicacion create() throws IllegalStateException {
      checkRequiredAttributes();
      return new Aplicacion(this);
    }

    private boolean idIsSet() {
      return (initBits & INIT_BIT_ID) == 0;
    }

    private boolean creadoEnIsSet() {
      return (initBits & INIT_BIT_CREADO_EN) == 0;
    }

    private boolean nombreIsSet() {
      return (initBits & INIT_BIT_NOMBRE) == 0;
    }

    private void checkRequiredAttributes() throws IllegalStateException {
      if (initBits != 0) {
        throw new IllegalStateException(formatRequiredAttributesMessage());
      }
    }
    private String formatRequiredAttributesMessage() {
      List<String> attributes = Lists.newArrayList();
      if (!idIsSet()) attributes.add("id");
      if (!creadoEnIsSet()) attributes.add("creadoEn");
      if (!nombreIsSet()) attributes.add("nombre");
      return "Cannot build Aplicacion, some of required attributes are not set " + attributes;
    }
  }
}
