package servicios.rabbit;

import akka.actor.ActorRef;
import akka.actor.Props;
import akka.actor.UntypedActor;
import akka.event.Logging;
import akka.event.LoggingAdapter;

// Manager 1->1 Connection 1->* Workers
// Config -> Connection -> Message
// Fuente de mensajes de todo el sistema
// TODO: Aislar estados (become): Conectado / No conectado
public class RabbitManager extends UntypedActor {
	
	final ActorRef rabbitConnection  = getContext().actorOf(Props.create(RabbitConnection.class), "connection");
	final LoggingAdapter log = Logging.getLogger(getContext().system(), this);
	 
	private final String QUEUE_NAME = "panel";

	public void onReceive(Object msg) throws Exception {
		if(msg instanceof RabbitProtocol.ConnectionSuccess){
			log.info("[Manager] Connected");
		} else {
			unhandled(msg);
		}
	}
	
	@Override
	public void preStart(){
		log.info("[Manager] Starting connection");
		rabbitConnection.tell( new RabbitProtocol.Connect(QUEUE_NAME, rabbitWorker), getSelf() );
	}

}

