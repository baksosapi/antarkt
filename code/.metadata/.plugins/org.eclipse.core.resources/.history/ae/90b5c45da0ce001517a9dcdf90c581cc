package servicios;

import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.util.List;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Address;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;
import com.typesafe.config.ConfigFactory;

import play.libs.Json;
import akka.actor.*;

public class RabbitConnection extends UntypedActorWithStash {
	
	private Channel channel;
	private Connection connection;
	
	public void onReceive(Object msg){
		if(msg instanceof RabbitProtocol.Connect){
			RabbitProtocol.Connect c = (RabbitProtocol.Connect) msg;
		} else if(msg instanceof RabbitProtocol.Disconnect){
			RabbitProtocol.Disconnect d = (RabbitProtocol.Disconnect) msg;
		}
	}
	
	  Procedure<Object> stateConnected = new Procedure<Object>() {
		    @Override
		    public void apply(Object message) {
		      if (message.equals("bar")) {
		        getSender().tell("I am already happy :-)", getSelf());
		      } else if (message.equals("foo")) {
		        getContext().become(angry);
		      }
		    }
		  };
	
	public void stateDisconnected(){ }
	
	public void connect() throws Exception {
		ConnectionFactory factory = new ConnectionFactory();
	    char[] keyPassPhrase = "secret".toCharArray();
	    
	    // Leer configuraci칩n para Rabbit desde application.conf 
		config = ConfigFactory.load();
		List<String> clusterAddresses = config.getStringList("rabbit.cluster");
		int clusterPort = config.getInt("rabbit.port");
		
		// Si no est치n definidos los nodos, la conexi칩n no va a suceder
		assert clusterAddresses.size() == 3 : "Se requieren 3 IPs de nodos bajo la llave 'rabbit.cluster' exponiendo el mismo puerto en la configuraci칩n para enlazar al cluster. ";
		
        // Certificados SSL
        KeyStore tks = KeyStore.getInstance("JKS");
        tks.load(new FileInputStream( config.getString("rabbit.certificates.path") ), keyPassPhrase);            
        TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
        tmf.init(tks);
        SSLContext c = SSLContext.getInstance( "TLS" );
        c.init(null, tmf.getTrustManagers(), null);

        factory.setUsername( "santos" );
        factory.setPassword( "rhino.metal.acid.cover" );
	    factory.useSslProtocol(c);
	    Address[] cluster = { new Address(clusterAddresses.get(0), clusterPort), new Address(clusterAddresses.get(1), clusterPort), new Address(clusterAddresses.get(2), clusterPort)};
	    
	    connection = factory.newConnection( cluster );
	    channel = connection.createChannel();
	    channel.queueDeclarePassive( QUEUE_NAME );
	    Consumer consumer = new DefaultConsumer(channel) {
		      @Override
		      public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
		          throws IOException {
		        String message = new String(body, UTF8);
		        System.out.println(" [x] Received '" + message + "'" + "from key " + envelope.getRoutingKey() + " as JSON \n" + Json.parse(message) + "\n");		        
		      
		      }
	    };
	    channel.basicConsume(QUEUE_NAME, false, consumer);
	}

}
