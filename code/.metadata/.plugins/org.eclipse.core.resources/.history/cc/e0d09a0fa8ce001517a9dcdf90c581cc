package servicios;

import akka.actor.OneForOneStrategy;
import akka.actor.SupervisorStrategy;
import akka.actor.SupervisorStrategy.Directive;
import static akka.actor.SupervisorStrategy.resume;
import static akka.actor.SupervisorStrategy.restart;
import static akka.actor.SupervisorStrategy.stop;
import static akka.actor.SupervisorStrategy.escalate;
import akka.actor.UntypedActor;
import akka.japi.Function;
import scala.concurrent.duration.Duration;

// Fuente de mensajes de todo el sistema
// TODO: Aislar estados (become): Conectado / No conectado
public class RabbitManager extends UntypedActor {
	
	ActorRef rabbitWorker = this.getContext().actorOf(RabbitWorker.class, "worker");
	
	  private static SupervisorStrategy strategy =
	    new OneForOneStrategy(10, Duration.create("1 minute"),
	      new Function<Throwable, Directive>() {
	        @Override
	        public Directive apply(Throwable t) {
	          if (t instanceof ArithmeticException) {
	            return resume();
	          } else if (t instanceof NullPointerException) {
	            return restart();
	          } else if (t instanceof IllegalArgumentException) {
	            return stop();
	          } else {
	            return escalate();
	          }
	        }
	      });
	 
	  @Override
	  public SupervisorStrategy supervisorStrategy() {
	    return strategy;
	  }
	
	private final String QUEUE_NAME = "panel";
	private final String UTF8 = "UTF-8";

	// export
	
	@Override
	public void postStop() throws Exception {
		// TODO Auto-generated method stub
		
	}
	
	public void generateConfiguration(){
		
	}

	
    
    

}
