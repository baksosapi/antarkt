package servicios.rabbit;
import java.io.IOException;

import javax.annotation.concurrent.NotThreadSafe;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;

import akka.actor.Props;
import akka.actor.UntypedActor;
import akka.actor.ActorRef;

public class RabbitChannel extends UntypedActor {
	
	private final Channel channel;
	private final String queueName;
	private final agentes;
	
	public RabbitChannel(Channel channel, String queueName, ActorRef supervisorAgentes){
		this.channel = channel;
		this.queueName = queueName;
		this.agentes = supervisorAgentes;
	}
	
	ActorRef workers =  getContext().actorOf(new RoundRobinPool(5).props(Props.create(RabbitWorker.class, )), 
		    "workers"); 
			
			//getContext().actorOf(Props.create(RabbitWorker.class), "worker"); //Considerar router con RoundRobin
	
	@Override
	public void onReceive(Object msg) throws Exception {
		if(msg instanceof RabbitProtocol.Ack){
			RabbitProtocol.Ack ack = (RabbitProtocol.Ack) msg;
			ack(ack);
		} else {
			unhandled(msg);
		}
	}
	
	@Override
	public void preStart() throws Exception {
		connect();
	}

	@Override
	public void postStop() throws Exception {
		disconnect();
	}
	
	private void connect() throws Exception { // TODO: Informar error
		channel.queueDeclarePassive( queueName );
		Consumer consumer = new DefaultConsumer(channel) { // Nueva hebra
		      @Override
		      public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
		          throws IOException {
		        
		        worker.tell( new RabbitProtocol.RawMessage(envelope, properties, consumerTag, body), getSelf() ); // Rawer (?)
		      
		      }
	    };
	    channel.basicConsume(queueName, false, consumer); // TODO Garantizar existencia de la cola
	    getContext().parent().tell( new RabbitProtocol.ChannelSuccess(), getSelf() );
	}
	
	private void disconnect() throws Exception {
		if(channel != null){
			channel.close();
		}
	}
	
	private void ack(RabbitProtocol.Ack ack) throws Exception {
		try {
			if(channel != null){
				channel.basicAck(ack.tag, false);
				System.out.println("ACKED " + ack.tag);
			}
		} catch (Exception e){
			throw new RabbitProtocol.AckException();
		}
	}

}
