package models.entidades;

import com.google.common.base.MoreObjects;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import java.time.LocalDate;
import java.util.List;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;

/**
 * Immutable implementation of {@link Aplicacion}.
 * <p>
 * Use the builder to create immutable instances:
 * {@code ImmutableAplicacion.builder()}.
 */
@SuppressWarnings("all")
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "Aplicacion"})
@Immutable
public final class ImmutableAplicacion extends Aplicacion {
  private final String nombre;
  private final ImmutableSet<Entorno> entornos;
  private final LocalDate creadoEn;
  private final String id;
  private final String nombre;

  private ImmutableAplicacion(
      String nombre,
      ImmutableSet<Entorno> entornos,
      LocalDate creadoEn,
      String id,
      String nombre) {
    this.nombre = nombre;
    this.entornos = entornos;
    this.creadoEn = creadoEn;
    this.id = id;
    this.nombre = nombre;
  }

  /**
   * @return The value of the {@code nombre} attribute
   */
  @Override
  public String nombre() {
    return nombre;
  }

  /**
   * @return The value of the {@code entornos} attribute
   */
  @Override
  public ImmutableSet<Entorno> entornos() {
    return entornos;
  }

  /**
   * @return The value of the {@code creadoEn} attribute
   */
  @Override
  public LocalDate getCreadoEn() {
    return creadoEn;
  }

  /**
   * @return The value of the {@code id} attribute
   */
  @Override
  public String getId() {
    return id;
  }

  /**
   * @return The value of the {@code nombre} attribute
   */
  @Override
  public String getNombre() {
    return nombre;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Aplicacion#nombre() nombre} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for nombre
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableAplicacion withNombre(String value) {
    if (this.nombre == value) return this;
    String newValue = Preconditions.checkNotNull(value, "nombre");
    return new ImmutableAplicacion(newValue, this.entornos, this.creadoEn, this.id, newValue);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link Aplicacion#entornos() entornos}.
   * @param elements The elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableAplicacion withEntornos(Entorno... elements) {
    ImmutableSet<Entorno> newValue = ImmutableSet.copyOf(elements);
    return new ImmutableAplicacion(this.nombre, newValue, this.creadoEn, this.id, this.nombre);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link Aplicacion#entornos() entornos}.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param elements An iterable of entornos elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableAplicacion withEntornos(Iterable<? extends Entorno> elements) {
    if (this.entornos == elements) return this;
    ImmutableSet<Entorno> newValue = ImmutableSet.copyOf(elements);
    return new ImmutableAplicacion(this.nombre, newValue, this.creadoEn, this.id, this.nombre);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Aplicacion#getCreadoEn() creadoEn} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for creadoEn
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableAplicacion withCreadoEn(LocalDate value) {
    if (this.creadoEn == value) return this;
    LocalDate newValue = Preconditions.checkNotNull(value, "creadoEn");
    return new ImmutableAplicacion(this.nombre, this.entornos, newValue, this.id, this.nombre);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Aplicacion#getId() id} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for id
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableAplicacion withId(String value) {
    if (this.id == value) return this;
    String newValue = Preconditions.checkNotNull(value, "id");
    return new ImmutableAplicacion(this.nombre, this.entornos, this.creadoEn, newValue, this.nombre);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Aplicacion#getNombre() nombre} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for nombre
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableAplicacion withNombre(String value) {
    if (this.nombre == value) return this;
    String newValue = Preconditions.checkNotNull(value, "nombre");
    return new ImmutableAplicacion(newValue, this.entornos, this.creadoEn, this.id, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableAplicacion} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableAplicacion
        && equalTo((ImmutableAplicacion) another);
  }

  private boolean equalTo(ImmutableAplicacion another) {
    return nombre.equals(another.nombre)
        && entornos.equals(another.entornos)
        && creadoEn.equals(another.creadoEn)
        && id.equals(another.id)
        && nombre.equals(another.nombre);
  }

  /**
   * Computes a hash code from attributes: {@code nombre}, {@code entornos}, {@code creadoEn}, {@code id}, {@code nombre}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    int h = 31;
    h = h * 17 + nombre.hashCode();
    h = h * 17 + entornos.hashCode();
    h = h * 17 + creadoEn.hashCode();
    h = h * 17 + id.hashCode();
    h = h * 17 + nombre.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code Aplicacion...} with all non-generated
   * and non-auxiliary attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return MoreObjects.toStringHelper("Aplicacion")
        .add("nombre", nombre)
        .add("entornos", entornos)
        .add("creadoEn", creadoEn)
        .add("id", id)
        .add("nombre", nombre)
        .toString();
  }

  /**
   * Creates an immutable copy of a {@link Aplicacion} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable Aplicacion instance
   */
  public static ImmutableAplicacion copyOf(Aplicacion instance) {
    if (instance instanceof ImmutableAplicacion) {
      return (ImmutableAplicacion) instance;
    }
    return ImmutableAplicacion.builder()
        .from(instance)
        .build();
  }

  /**
   * Creates a builder for {@link ImmutableAplicacion ImmutableAplicacion}.
   * @return A new ImmutableAplicacion builder
   */
  public static ImmutableAplicacion.Builder builder() {
    return new ImmutableAplicacion.Builder();
  }

  /**
   * Builds instances of type {@link ImmutableAplicacion ImmutableAplicacion}.
   * Initialize attributes and then invoke the {@link #build()} method to create an
   * immutable instance.
   * <p><em>{@code Builder} is not thread-safe and generally should not be stored in a field or collection,
   * but instead used immediately to create instances.</em>
   */
  @NotThreadSafe
  public static final class Builder {
    private static final long INIT_BIT_NOMBRE = 0x1L;
    private static final long INIT_BIT_CREADO_EN = 0x2L;
    private static final long INIT_BIT_ID = 0x4L;
    private static final long INIT_BIT_NOMBRE = 0x8L;
    private long initBits = 0xf;

    private @Nullable String nombre;
    private ImmutableSet.Builder<Entorno> entornosBuilder = ImmutableSet.builder();
    private @Nullable LocalDate creadoEn;
    private @Nullable String id;
    private @Nullable String nombre;

    private Builder() {
    }

    /**
     * Fill a builder with attribute values from the provided {@code models.entidades.Aplicacion} instance.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(Aplicacion instance) {
      Preconditions.checkNotNull(instance, "instance");
      from((Object) instance);
      return this;
    }

    /**
     * Fill a builder with attribute values from the provided {@code models.entidades.Entidad} instance.
     * @param instance The instance from which to copy values
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder from(Entidad instance) {
      Preconditions.checkNotNull(instance, "instance");
      from((Object) instance);
      return this;
    }

    private void from(Object object) {
      long bits = 0;
      if (object instanceof Aplicacion) {
        Aplicacion instance = (Aplicacion) object;
        addAllEntornos(instance.entornos());
        nombre(instance.getNombre());
      }
      if (object instanceof Entidad) {
        Entidad instance = (Entidad) object;
        creadoEn(instance.getCreadoEn());
        nombre(instance.getNombre());
        id(instance.getId());
      }
    }

    /**
     * Initializes the value for the {@link Aplicacion#nombre() nombre} attribute.
     * @param nombre The value for nombre 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder nombre(String nombre) {
      this.nombre = Preconditions.checkNotNull(nombre, "nombre");
      initBits &= ~INIT_BIT_NOMBRE;
      return this;
    }

    /**
     * Adds one element to {@link Aplicacion#entornos() entornos} set.
     * @param element A entornos element
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder addEntornos(Entorno element) {
      entornosBuilder.add(element);
      return this;
    }

    /**
     * Adds elements to {@link Aplicacion#entornos() entornos} set.
     * @param elements An array of entornos elements
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder addEntornos(Entorno... elements) {
      entornosBuilder.add(elements);
      return this;
    }

    /**
     * Sets or replaces all elements for {@link Aplicacion#entornos() entornos} set.
     * @param elements An iterable of entornos elements
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder entornos(Iterable<? extends Entorno> elements) {
      entornosBuilder = ImmutableSet.builder();
      return addAllEntornos(elements);
    }

    /**
     * Adds elements to {@link Aplicacion#entornos() entornos} set.
     * @param elements An iterable of entornos elements
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder addAllEntornos(Iterable<? extends Entorno> elements) {
      entornosBuilder.addAll(elements);
      return this;
    }

    /**
     * Initializes the value for the {@link Aplicacion#getCreadoEn() creadoEn} attribute.
     * @param creadoEn The value for creadoEn 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder creadoEn(LocalDate creadoEn) {
      this.creadoEn = Preconditions.checkNotNull(creadoEn, "creadoEn");
      initBits &= ~INIT_BIT_CREADO_EN;
      return this;
    }

    /**
     * Initializes the value for the {@link Aplicacion#getId() id} attribute.
     * @param id The value for id 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder id(String id) {
      this.id = Preconditions.checkNotNull(id, "id");
      initBits &= ~INIT_BIT_ID;
      return this;
    }

    /**
     * Initializes the value for the {@link Aplicacion#getNombre() nombre} attribute.
     * @param nombre The value for nombre 
     * @return {@code this} builder for use in a chained invocation
     */
    public final Builder nombre(String nombre) {
      this.nombre = Preconditions.checkNotNull(nombre, "nombre");
      initBits &= ~INIT_BIT_NOMBRE;
      return this;
    }

    /**
     * Builds a new {@link ImmutableAplicacion ImmutableAplicacion}.
     * @return An immutable instance of Aplicacion
     * @throws java.lang.IllegalStateException if any required attributes are missing
     */
    public ImmutableAplicacion build() throws IllegalStateException {
      checkRequiredAttributes();
      return new ImmutableAplicacion(nombre, entornosBuilder.build(), creadoEn, id, nombre);
    }

    private boolean nombreIsSet() {
      return (initBits & INIT_BIT_NOMBRE) == 0;
    }

    private boolean creadoEnIsSet() {
      return (initBits & INIT_BIT_CREADO_EN) == 0;
    }

    private boolean idIsSet() {
      return (initBits & INIT_BIT_ID) == 0;
    }

    private boolean nombreIsSet() {
      return (initBits & INIT_BIT_NOMBRE) == 0;
    }

    private void checkRequiredAttributes() throws IllegalStateException {
      if (initBits != 0) {
        throw new IllegalStateException(formatRequiredAttributesMessage());
      }
    }
    private String formatRequiredAttributesMessage() {
      List<String> attributes = Lists.newArrayList();
      if (!nombreIsSet()) attributes.add("nombre");
      if (!creadoEnIsSet()) attributes.add("creadoEn");
      if (!idIsSet()) attributes.add("id");
      if (!nombreIsSet()) attributes.add("nombre");
      return "Cannot build Aplicacion, some of required attributes are not set " + attributes;
    }
  }
}
