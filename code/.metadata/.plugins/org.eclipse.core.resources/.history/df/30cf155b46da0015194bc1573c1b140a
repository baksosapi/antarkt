package servicios.dao;

import java.util.Random;
import java.util.concurrent.CompletableFuture;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.jongo.*;
import org.jongo.marshall.jackson.JacksonMapper;

import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import com.mongodb.*;

import play.inject.ApplicationLifecycle;

@Singleton
public class MongoImp implements JongoDatabase {
	
	final DB db;
	final Jongo jongo;
	final MongoClient mongo;
	final Mapper mapper;
	final int id;
	
	@SuppressWarnings("deprecation")
	@Inject public MongoImp(ApplicationLifecycle lifecycle){
		this();
		lifecycle.addStopHook( () -> close());
	}

	public MongoImp(){
		Random r  = new java.util.Random();
		String v = "aaaaa";
		mongo = new MongoClient("localhost", 27017);
		id = r.nextInt();
		db = mongo.getDB("panel");
		mapper = new JacksonMapper.Builder()
				.registerModule( new Jdk8Module() )
				.registerModule(new JavaTimeModule() )
				.registerModule( new ParameterNamesModule() )
				.registerModule( new DefaultScalaModule() )
				.build();
		jongo = new Jongo(db, mapper);
		System.out.println("Created Mongo Instance #"+id + " /" + v);
	}
	
	public MongoCollection getCollection(String name){
		return this.jongo.getCollection(name);
	}
	
	public DB getDatabase(){
		return this.jongo.getDatabase();
	}
	
	public CompletableFuture<Boolean> close(){
		return CompletableFuture.supplyAsync( () -> { mongo.close(); System.out.println("Closing MongoDB..."); return true;} );
	}
	

}
