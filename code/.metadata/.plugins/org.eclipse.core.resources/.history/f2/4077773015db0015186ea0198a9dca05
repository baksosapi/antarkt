package servicios.agente;

import java.util.HashMap;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

import javax.inject.Inject;
import javax.inject.Named;

import akka.actor.ActorRef;
import akka.actor.UntypedActor;;

import servicios.agente.ProtocoloAgente.*;


// RabbitMQ <---> Supervisor <---> Jongo


/*
 * Supervisor debe tener
 * - un registro de TODOS los agentes que est'an activos
 * - un registro de los agentes inactivos
 * - mecanismos para contactar un agente a partir de su token/ID
 */
public class SupervisorAgente extends UntypedActor {
	
	@Inject @Named("rabbit-service") private ActorRef rabbit;
	
	//private final java.util.Optional<String> receivedToken;
	
	public void onReceive(Object msg){
		if(msg instanceof ProtocoloAgente.StatusReport){
			ProtocoloAgente.StatusReport report = (ProtocoloAgente.StatusReport) msg;
		} else if(msg instanceof ProtocoloAgente.Anunciar){
			ProtocoloAgente.Anunciar a = (ProtocoloAgente.Anunciar) msg;
			anunciar(a);
		} else if(msg instanceof ProtocoloAgente.Outgoing){
			ProtocoloAgente.Outgoing out = (ProtocoloAgente.Outgoing) msg;
			rabbit.tell( out, getSelf() );
		} else if(msg instanceof ProtocoloAgente.Incoming){
			ProtocoloAgente.Incoming in = (ProtocoloAgente.Incoming) msg;
			deliver(in);
		} else if(msg instanceof ProtocoloAgente.Registrar){
			registerAgent( (ProtocoloAgente.Registrar) msg);
		} else {
			unhandled(msg);
		}
		
	}

	// Entregar el mensaje recibido al agente correspondiente
	private void deliver(Incoming i) {
		// Cubrir casos de agente desactivado, agente pegado
		// XXX evitar ir a la BD para conocer el estado del agente
		// XXX Evitar tener agentes en memoria que han sido desactivados
		// XXX Reflejar una desactivacion con la detencion del actor.
		// Luego, un agente desactivado no posee un actor en ejecucion
	}
	
	// El metodo debe ser compatible tanto con agentes existentes, como con agentes nuevos
	// Implica un viaje a la BD
	// Responder al agente con la "cola" del MQ a la que enviar los mensajes
	private void anunciar(Anunciar a) {
		ActorRef child = getContext().getChild( a.token().toString() );
		if(child != null){
			// 
		} else {
			// registrar nuevo agente?
		}	
	}

	/* Registrar agente:
	 * --> Generar token de Arca / CoordinadorAgentes ! RegistrarToken( UUID token )
	 * Arca es ejecutado en la m'aquina indicada Â¿SSH?
	 * <-- Agente se anuncia con token entregado / CoordinadorAgentes ! AnunciarAgente( token )  
	 * --> Crear actor para manejar los mensajes del agente recien creado
	 * Necesito que Arca detecte si ya ha sido instalado
	 */
	public CompletableFuture<String> registerAgent(ProtocoloAgente.Registrar r){
		// Generar token
		UUID token = UUID.randomUUID();
		// Guardar token para validar anuncio en BD
		//
		// Instalar agente: SSH ! Arca(token, ip)
		ActorRef child = getContext().actorOf( Props.create(ActorAgente.class), token.toString() );
		child.tell( r.instalar(), getSelf() );
		return CompletableFuture.completedFuture("TODO");
	}
	
	public void contactAllChilds(){
		Iterable<ActorRef> ch = this.getContext().getChildren();
		ch.forEach( (c) -> c.tell( new ProtocoloAgente.Status(), getSelf() ) );
	}
	
	// retrieve agents
	// GetAllActiveAgents --> DB --> Coordinador --> ContactarAgentes --> 

}
