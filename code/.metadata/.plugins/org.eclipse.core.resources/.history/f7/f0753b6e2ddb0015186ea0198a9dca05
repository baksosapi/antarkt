package servicios.rabbit;

import java.util.Optional;

import com.fasterxml.jackson.databind.JsonNode;

import akka.actor.ActorRef;
import akka.actor.UntypedActor;
import servicios.RoutingKey;
import servicios.agente.ProtocoloAgente;
import servicios.rabbit.RabbitProtocol.RawMessage;
import models.mensajes.*;

public class RabbitWorker extends UntypedActor {
	
	private ActorRef supervisorAgentes;
	
	public RabbitWorker(ActorRef supervisorAgentes){
		this.supervisorAgentes = supervisorAgentes;
	}
	
	@Override
	public void onReceive(Object msg) throws Exception {
		if(msg instanceof RabbitProtocol.RawMessage){
			RabbitProtocol.RawMessage raw = (RabbitProtocol.RawMessage) msg;
			convertToJson(raw);
		} else {
			unhandled(msg);
		}
	}

	private void convertToJson(RawMessage raw) throws Exception {
		String contentType = raw.properties.getContentType();
		if( contentType != null && contentType.contains("json") ){
			try {
				JsonNode node = play.libs.Json.parse(raw.body);
				
				// Confirmar llegada
				getContext().parent().tell( new RabbitProtocol.Ack(raw.envelope.getDeliveryTag()), getSelf() );
				
				System.out.println(" [x] Received '" + node + "'" + " from key " + raw.envelope.getRoutingKey());
		        System.out.println(" Delivery tag: " + raw.envelope.getDeliveryTag() + " / Consumer Tag " + raw.consumerTag + "\n");
		        
		        // Enrutar a destinatario
		        deliver(node, raw.envelope.getRoutingKey() );
			} catch (RuntimeException e){
				System.out.println( new String(raw.body, "UTF-8") ); // XXX
				//throw new RabbitProtocol.DecodeException(e, raw.body);
				// prisma ! invalid message content
			}
		} else {
			System.out.println( "Unknown message content-type: " + raw.properties.getContentType() );
		}
		//Send to destination
	}

	/* Si el routing key est'a mal formado, los mensajes no ser'an entregados */
	private void deliver(JsonNode json, String key) throws Exception {
		Optional<RoutingKey> ork = RoutingKey.fromString(key);
		ork.ifPresent( rk -> {
			if( rk.uuid.isPresent() ){
				supervisorAgentes.tell( new ProtocoloAgente.Incoming( rk.uuid.get(), json ) , getSelf() );
			} 
		});
		
		if(ork.isPresent()){
			
			if( ork.get().entidad.equals("agentes") ){
				 
			}
			//
		} else {
			// Ni idea
		}
		
		
		// >> antarkt.panel.agentes.# --> SupervisorAgentes
		// >> antarkt.panel.<otro>
		
		// TODO Crear metodo mas correcto de acceder y procesar los routing keys. Una clase especializada, en lugar de String
		
		// Detectar a qu'e lugar del sistema debe ir, a partir del routing key
			// TODO Broadcast
		
			// Transformar en Mensaje interno Entrante
			// Si no viene el token no se puede procesar
			// Entregar a SupervisorAgentes
		
			// sin manejar

		try {

			StringMessage msg = play.libs.Json.fromJson(json, StringMessage.class);
			System.out.println( msg.getMensaje() + " " + msg.getIdTrabajo() + " / " + msg.getEstado() );
			// ack en la bd
			// JobManager ! Ack(msg.referencia) --> Mongo ! Update(referencia=msg.referencia, completed=true)
		} catch (Exception e){
			System.out.println("deserializaion failed" + e.getMessage() );

		}
		
		

	}

}
